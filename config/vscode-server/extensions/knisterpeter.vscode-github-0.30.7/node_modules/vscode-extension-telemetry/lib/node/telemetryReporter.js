"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = __importStar(require("os"));
const vscode = __importStar(require("vscode"));
const appInsights = __importStar(require("applicationinsights"));
const baseTelemetryReporter_1 = require("../common/baseTelemetryReporter");
class AppInsightsAppender {
    constructor(key) {
        //check if another instance is already initialized
        if (appInsights.defaultClient) {
            this._appInsightsClient = new appInsights.TelemetryClient(key);
            // no other way to enable offline mode
            this._appInsightsClient.channel.setUseDiskRetryCaching(true);
        }
        else {
            appInsights.setup(key)
                .setAutoCollectRequests(false)
                .setAutoCollectPerformance(false)
                .setAutoCollectExceptions(false)
                .setAutoCollectDependencies(false)
                .setAutoDependencyCorrelation(false)
                .setAutoCollectConsole(false)
                .setUseDiskRetryCaching(true)
                .start();
            this._appInsightsClient = appInsights.defaultClient;
        }
        if (vscode && vscode.env) {
            this._appInsightsClient.context.tags[this._appInsightsClient.context.keys.userId] = vscode.env.machineId;
            this._appInsightsClient.context.tags[this._appInsightsClient.context.keys.sessionId] = vscode.env.sessionId;
            this._appInsightsClient.context.tags[this._appInsightsClient.context.keys.cloudRole] = vscode.env.appName;
        }
        //check if it's an Asimov key to change the endpoint
        if (key && key.indexOf("AIF-") === 0) {
            this._appInsightsClient.config.endpointUrl = "https://vortex.data.microsoft.com/collect/v1";
        }
    }
    logEvent(eventName, data) {
        if (!this._appInsightsClient) {
            return;
        }
        this._appInsightsClient.trackEvent({
            name: eventName,
            properties: data === null || data === void 0 ? void 0 : data.properties,
            measurements: data === null || data === void 0 ? void 0 : data.measurements
        });
    }
    logException(exception, data) {
        if (!this._appInsightsClient) {
            return;
        }
        this._appInsightsClient.trackException({
            exception,
            properties: data === null || data === void 0 ? void 0 : data.properties,
            measurements: data === null || data === void 0 ? void 0 : data.measurements
        });
    }
    flush() {
        if (this._appInsightsClient) {
            this._appInsightsClient.flush();
            this._appInsightsClient = undefined;
        }
        return Promise.resolve(undefined);
    }
}
class TelemetryReporter extends baseTelemetryReporter_1.BaseTelemtryReporter {
    constructor(extensionId, extensionVersion, key, firstParty) {
        const appender = new AppInsightsAppender(key);
        if (key && key.indexOf("AIF-") === 0) {
            firstParty = true;
        }
        super(extensionId, extensionVersion, appender, { release: os.release(), platform: os.platform() }, firstParty);
    }
}
exports.default = TelemetryReporter;
//# sourceMappingURL=telemetryReporter.js.map